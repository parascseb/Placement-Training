class Solution {
public:
    int next(stack<TreeNode*> &st, TreeNode* root){
        TreeNode* curr = st.top(); st.pop();
        int x = curr -> val;
        if (curr -> right == NULL) return x;
        curr = curr -> right;
        while (curr){
            st.push(curr);
            curr = curr -> left;
        }
        return x;
    }
    int before(stack<TreeNode*> &st, TreeNode* root){
        TreeNode* curr = st.top(); st.pop();
        int x = curr -> val;
        if (curr -> left == NULL) return x;
        curr = curr -> left;
        while (curr){
            st.push(curr);
            curr = curr -> right;
        }
        return x;
    }
    bool findTarget(TreeNode* root, int k) {
        stack<TreeNode*> nst, bst;
        
        TreeNode* curr = root ;
        while (curr){
            nst.push(curr);
            curr = curr -> left;
        }
        curr = root ;
        while (curr){
            bst.push(curr);
            curr = curr -> right;
        }
        int i = next(nst, root);
        int j = before(bst, root);
        while (i != j){
            int sum = i + j;
            if (sum == k) return true;
            else if (sum < k){
                i = next(nst, root);
            }else{
                j = before(bst, root);
            }
        }
        return false;
    }
};
